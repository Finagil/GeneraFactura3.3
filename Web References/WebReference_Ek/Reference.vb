'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
'
Namespace WebReference_Ek
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WSCFDBuilderPlusSoap", [Namespace]:="http://edixcfdisecure.ekomercio.com/")>  _
    Partial Public Class WSCFDBuilderPlus
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ValidacionFacturasCFDIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private aboutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private procesarTextoPlanoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCFDI_EmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCFDIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCFDI_SignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTimbreCFDIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelarCFDIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelarRetencionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SAT_ValidarListaBlancaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SAT_ValidarCertificadoPropiosMediosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SAT_ValidarCertificadoPropiosMediosFechaDocOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SAT_ConsecutivoDentroRangoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SATint_AgregarCertificadoParaFIELOperationCompleted As System.Threading.SendOrPostCallback
        
        Private anularDocumentoElectronicoXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private anularDocumentoElectronicoXML_SinNotaDeCreditoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private receiveCFDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCFDI_FromCFDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private generaPDFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCFDI_FromCFDTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SAT_ValidarComplementoNominaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private existeConsecutivoInternoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private generaPDF_RecepcionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private generaPDF_EnvioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SAT_ValidarComplementoNotariosPublicosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SAT_ValidarTimbreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SAT_ExisteTimbreSATOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidarFuncionamientoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.GeneraFactura.My.MySettings.Default.GeneraFactura33_WebReference_Ek_WSCFDBuilderPlus
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ValidacionFacturasCFDICompleted As ValidacionFacturasCFDICompletedEventHandler
        
        '''<remarks/>
        Public Event aboutCompleted As aboutCompletedEventHandler
        
        '''<remarks/>
        Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler
        
        '''<remarks/>
        Public Event procesarTextoPlanoCompleted As procesarTextoPlanoCompletedEventHandler
        
        '''<remarks/>
        Public Event getCFDI_EmailCompleted As getCFDI_EmailCompletedEventHandler
        
        '''<remarks/>
        Public Event getCFDICompleted As getCFDICompletedEventHandler
        
        '''<remarks/>
        Public Event getCFDI_SignCompleted As getCFDI_SignCompletedEventHandler
        
        '''<remarks/>
        Public Event getTimbreCFDICompleted As getTimbreCFDICompletedEventHandler
        
        '''<remarks/>
        Public Event cancelarCFDICompleted As cancelarCFDICompletedEventHandler
        
        '''<remarks/>
        Public Event cancelarRetencionCompleted As cancelarRetencionCompletedEventHandler
        
        '''<remarks/>
        Public Event SAT_ValidarListaBlancaCompleted As SAT_ValidarListaBlancaCompletedEventHandler
        
        '''<remarks/>
        Public Event SAT_ValidarCertificadoPropiosMediosCompleted As SAT_ValidarCertificadoPropiosMediosCompletedEventHandler
        
        '''<remarks/>
        Public Event SAT_ValidarCertificadoPropiosMediosFechaDocCompleted As SAT_ValidarCertificadoPropiosMediosFechaDocCompletedEventHandler
        
        '''<remarks/>
        Public Event SAT_ConsecutivoDentroRangoCompleted As SAT_ConsecutivoDentroRangoCompletedEventHandler
        
        '''<remarks/>
        Public Event SATint_AgregarCertificadoParaFIELCompleted As SATint_AgregarCertificadoParaFIELCompletedEventHandler
        
        '''<remarks/>
        Public Event anularDocumentoElectronicoXMLCompleted As anularDocumentoElectronicoXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event anularDocumentoElectronicoXML_SinNotaDeCreditoCompleted As anularDocumentoElectronicoXML_SinNotaDeCreditoCompletedEventHandler
        
        '''<remarks/>
        Public Event receiveCFDCompleted As receiveCFDCompletedEventHandler
        
        '''<remarks/>
        Public Event getCFDI_FromCFDCompleted As getCFDI_FromCFDCompletedEventHandler
        
        '''<remarks/>
        Public Event generaPDFCompleted As generaPDFCompletedEventHandler
        
        '''<remarks/>
        Public Event getCFDI_FromCFDTokenCompleted As getCFDI_FromCFDTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event SAT_ValidarComplementoNominaCompleted As SAT_ValidarComplementoNominaCompletedEventHandler
        
        '''<remarks/>
        Public Event existeConsecutivoInternoCompleted As existeConsecutivoInternoCompletedEventHandler
        
        '''<remarks/>
        Public Event generaPDF_RecepcionCompleted As generaPDF_RecepcionCompletedEventHandler
        
        '''<remarks/>
        Public Event generaPDF_EnvioCompleted As generaPDF_EnvioCompletedEventHandler
        
        '''<remarks/>
        Public Event SAT_ValidarComplementoNotariosPublicosCompleted As SAT_ValidarComplementoNotariosPublicosCompletedEventHandler
        
        '''<remarks/>
        Public Event SAT_ValidarTimbreCompleted As SAT_ValidarTimbreCompletedEventHandler
        
        '''<remarks/>
        Public Event SAT_ExisteTimbreSATCompleted As SAT_ExisteTimbreSATCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidarFuncionamientoCompleted As ValidarFuncionamientoCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/ValidacionFacturasCFDI", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidacionFacturasCFDI(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String) As String
            Dim results() As Object = Me.Invoke("ValidacionFacturasCFDI", New Object() {usuario, password, xmlFirmado})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidacionFacturasCFDIAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String)
            Me.ValidacionFacturasCFDIAsync(usuario, password, xmlFirmado, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidacionFacturasCFDIAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String, ByVal userState As Object)
            If (Me.ValidacionFacturasCFDIOperationCompleted Is Nothing) Then
                Me.ValidacionFacturasCFDIOperationCompleted = AddressOf Me.OnValidacionFacturasCFDIOperationCompleted
            End If
            Me.InvokeAsync("ValidacionFacturasCFDI", New Object() {usuario, password, xmlFirmado}, Me.ValidacionFacturasCFDIOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidacionFacturasCFDIOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidacionFacturasCFDICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidacionFacturasCFDICompleted(Me, New ValidacionFacturasCFDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/about", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function about() As String
            Dim results() As Object = Me.Invoke("about", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub aboutAsync()
            Me.aboutAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub aboutAsync(ByVal userState As Object)
            If (Me.aboutOperationCompleted Is Nothing) Then
                Me.aboutOperationCompleted = AddressOf Me.OnaboutOperationCompleted
            End If
            Me.InvokeAsync("about", New Object(-1) {}, Me.aboutOperationCompleted, userState)
        End Sub
        
        Private Sub OnaboutOperationCompleted(ByVal arg As Object)
            If (Not (Me.aboutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent aboutCompleted(Me, New aboutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/HelloWorld", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(-1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloWorldCompleted(Me, New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/procesarTextoPlano", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function procesarTextoPlano(ByVal usuario As String, ByVal password As String, ByVal id As String, ByVal textoPlano As String) As String
            Dim results() As Object = Me.Invoke("procesarTextoPlano", New Object() {usuario, password, id, textoPlano})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub procesarTextoPlanoAsync(ByVal usuario As String, ByVal password As String, ByVal id As String, ByVal textoPlano As String)
            Me.procesarTextoPlanoAsync(usuario, password, id, textoPlano, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub procesarTextoPlanoAsync(ByVal usuario As String, ByVal password As String, ByVal id As String, ByVal textoPlano As String, ByVal userState As Object)
            If (Me.procesarTextoPlanoOperationCompleted Is Nothing) Then
                Me.procesarTextoPlanoOperationCompleted = AddressOf Me.OnprocesarTextoPlanoOperationCompleted
            End If
            Me.InvokeAsync("procesarTextoPlano", New Object() {usuario, password, id, textoPlano}, Me.procesarTextoPlanoOperationCompleted, userState)
        End Sub
        
        Private Sub OnprocesarTextoPlanoOperationCompleted(ByVal arg As Object)
            If (Not (Me.procesarTextoPlanoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent procesarTextoPlanoCompleted(Me, New procesarTextoPlanoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/getCFDI_Email", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCFDI_Email(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String, ByVal email As String) As String
            Dim results() As Object = Me.Invoke("getCFDI_Email", New Object() {usuario, password, xmlFirmado, email})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCFDI_EmailAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String, ByVal email As String)
            Me.getCFDI_EmailAsync(usuario, password, xmlFirmado, email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCFDI_EmailAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String, ByVal email As String, ByVal userState As Object)
            If (Me.getCFDI_EmailOperationCompleted Is Nothing) Then
                Me.getCFDI_EmailOperationCompleted = AddressOf Me.OngetCFDI_EmailOperationCompleted
            End If
            Me.InvokeAsync("getCFDI_Email", New Object() {usuario, password, xmlFirmado, email}, Me.getCFDI_EmailOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCFDI_EmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCFDI_EmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCFDI_EmailCompleted(Me, New getCFDI_EmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/getCFDI", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCFDI(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String) As String
            Dim results() As Object = Me.Invoke("getCFDI", New Object() {usuario, password, xmlFirmado})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCFDIAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String)
            Me.getCFDIAsync(usuario, password, xmlFirmado, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCFDIAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String, ByVal userState As Object)
            If (Me.getCFDIOperationCompleted Is Nothing) Then
                Me.getCFDIOperationCompleted = AddressOf Me.OngetCFDIOperationCompleted
            End If
            Me.InvokeAsync("getCFDI", New Object() {usuario, password, xmlFirmado}, Me.getCFDIOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCFDIOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCFDICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCFDICompleted(Me, New getCFDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/getCFDI_Sign", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCFDI_Sign(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String) As String
            Dim results() As Object = Me.Invoke("getCFDI_Sign", New Object() {usuario, password, xmlFirmado})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCFDI_SignAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String)
            Me.getCFDI_SignAsync(usuario, password, xmlFirmado, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCFDI_SignAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String, ByVal userState As Object)
            If (Me.getCFDI_SignOperationCompleted Is Nothing) Then
                Me.getCFDI_SignOperationCompleted = AddressOf Me.OngetCFDI_SignOperationCompleted
            End If
            Me.InvokeAsync("getCFDI_Sign", New Object() {usuario, password, xmlFirmado}, Me.getCFDI_SignOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCFDI_SignOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCFDI_SignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCFDI_SignCompleted(Me, New getCFDI_SignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/getTimbreCFDI", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTimbreCFDI(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String) As String
            Dim results() As Object = Me.Invoke("getTimbreCFDI", New Object() {usuario, password, xmlFirmado})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTimbreCFDIAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String)
            Me.getTimbreCFDIAsync(usuario, password, xmlFirmado, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTimbreCFDIAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String, ByVal userState As Object)
            If (Me.getTimbreCFDIOperationCompleted Is Nothing) Then
                Me.getTimbreCFDIOperationCompleted = AddressOf Me.OngetTimbreCFDIOperationCompleted
            End If
            Me.InvokeAsync("getTimbreCFDI", New Object() {usuario, password, xmlFirmado}, Me.getTimbreCFDIOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTimbreCFDIOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTimbreCFDICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTimbreCFDICompleted(Me, New getTimbreCFDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/cancelarCFDI", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cancelarCFDI(ByVal usuario As String, ByVal password As String, ByVal rfcEmisor As String, ByVal uuid As String) As String
            Dim results() As Object = Me.Invoke("cancelarCFDI", New Object() {usuario, password, rfcEmisor, uuid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelarCFDIAsync(ByVal usuario As String, ByVal password As String, ByVal rfcEmisor As String, ByVal uuid As String)
            Me.cancelarCFDIAsync(usuario, password, rfcEmisor, uuid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelarCFDIAsync(ByVal usuario As String, ByVal password As String, ByVal rfcEmisor As String, ByVal uuid As String, ByVal userState As Object)
            If (Me.cancelarCFDIOperationCompleted Is Nothing) Then
                Me.cancelarCFDIOperationCompleted = AddressOf Me.OncancelarCFDIOperationCompleted
            End If
            Me.InvokeAsync("cancelarCFDI", New Object() {usuario, password, rfcEmisor, uuid}, Me.cancelarCFDIOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelarCFDIOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelarCFDICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelarCFDICompleted(Me, New cancelarCFDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/cancelarRetencion", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cancelarRetencion(ByVal usuario As String, ByVal password As String, ByVal rfcEmisor As String, ByVal uuid As String) As String
            Dim results() As Object = Me.Invoke("cancelarRetencion", New Object() {usuario, password, rfcEmisor, uuid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelarRetencionAsync(ByVal usuario As String, ByVal password As String, ByVal rfcEmisor As String, ByVal uuid As String)
            Me.cancelarRetencionAsync(usuario, password, rfcEmisor, uuid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelarRetencionAsync(ByVal usuario As String, ByVal password As String, ByVal rfcEmisor As String, ByVal uuid As String, ByVal userState As Object)
            If (Me.cancelarRetencionOperationCompleted Is Nothing) Then
                Me.cancelarRetencionOperationCompleted = AddressOf Me.OncancelarRetencionOperationCompleted
            End If
            Me.InvokeAsync("cancelarRetencion", New Object() {usuario, password, rfcEmisor, uuid}, Me.cancelarRetencionOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelarRetencionOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelarRetencionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelarRetencionCompleted(Me, New cancelarRetencionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/SAT_ValidarListaBlanca", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SAT_ValidarListaBlanca(ByVal cRFC As String, ByVal cNumeroCertificado As String, ByVal dFechaFAK As Date, ByRef cMensaje As String) As Long
            Dim results() As Object = Me.Invoke("SAT_ValidarListaBlanca", New Object() {cRFC, cNumeroCertificado, dFechaFAK, cMensaje})
            cMensaje = CType(results(1),String)
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarListaBlancaAsync(ByVal cRFC As String, ByVal cNumeroCertificado As String, ByVal dFechaFAK As Date, ByVal cMensaje As String)
            Me.SAT_ValidarListaBlancaAsync(cRFC, cNumeroCertificado, dFechaFAK, cMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarListaBlancaAsync(ByVal cRFC As String, ByVal cNumeroCertificado As String, ByVal dFechaFAK As Date, ByVal cMensaje As String, ByVal userState As Object)
            If (Me.SAT_ValidarListaBlancaOperationCompleted Is Nothing) Then
                Me.SAT_ValidarListaBlancaOperationCompleted = AddressOf Me.OnSAT_ValidarListaBlancaOperationCompleted
            End If
            Me.InvokeAsync("SAT_ValidarListaBlanca", New Object() {cRFC, cNumeroCertificado, dFechaFAK, cMensaje}, Me.SAT_ValidarListaBlancaOperationCompleted, userState)
        End Sub
        
        Private Sub OnSAT_ValidarListaBlancaOperationCompleted(ByVal arg As Object)
            If (Not (Me.SAT_ValidarListaBlancaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SAT_ValidarListaBlancaCompleted(Me, New SAT_ValidarListaBlancaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/SAT_ValidarCertificadoPropiosMedios", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SAT_ValidarCertificadoPropiosMedios(ByVal cRFC As String, ByVal cNumeroCertificado As String, ByVal cCertificadoBase64 As String, ByRef nValidacionCertificado As EnValidacionCertificado, ByRef cMensaje As String) As Boolean
            Dim results() As Object = Me.Invoke("SAT_ValidarCertificadoPropiosMedios", New Object() {cRFC, cNumeroCertificado, cCertificadoBase64, nValidacionCertificado, cMensaje})
            nValidacionCertificado = CType(results(1),EnValidacionCertificado)
            cMensaje = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarCertificadoPropiosMediosAsync(ByVal cRFC As String, ByVal cNumeroCertificado As String, ByVal cCertificadoBase64 As String, ByVal nValidacionCertificado As EnValidacionCertificado, ByVal cMensaje As String)
            Me.SAT_ValidarCertificadoPropiosMediosAsync(cRFC, cNumeroCertificado, cCertificadoBase64, nValidacionCertificado, cMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarCertificadoPropiosMediosAsync(ByVal cRFC As String, ByVal cNumeroCertificado As String, ByVal cCertificadoBase64 As String, ByVal nValidacionCertificado As EnValidacionCertificado, ByVal cMensaje As String, ByVal userState As Object)
            If (Me.SAT_ValidarCertificadoPropiosMediosOperationCompleted Is Nothing) Then
                Me.SAT_ValidarCertificadoPropiosMediosOperationCompleted = AddressOf Me.OnSAT_ValidarCertificadoPropiosMediosOperationCompleted
            End If
            Me.InvokeAsync("SAT_ValidarCertificadoPropiosMedios", New Object() {cRFC, cNumeroCertificado, cCertificadoBase64, nValidacionCertificado, cMensaje}, Me.SAT_ValidarCertificadoPropiosMediosOperationCompleted, userState)
        End Sub
        
        Private Sub OnSAT_ValidarCertificadoPropiosMediosOperationCompleted(ByVal arg As Object)
            If (Not (Me.SAT_ValidarCertificadoPropiosMediosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SAT_ValidarCertificadoPropiosMediosCompleted(Me, New SAT_ValidarCertificadoPropiosMediosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/SAT_ValidarCertificadoPropiosMediosFechaDoc", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SAT_ValidarCertificadoPropiosMediosFechaDoc(ByVal cRFC As String, ByVal cNumeroCertificado As String, ByVal cCertificadoBase64 As String, ByRef nValidacionCertificado As EnValidacionCertificado, ByRef cMensaje As String, ByVal dFechaDocumento As Date) As Boolean
            Dim results() As Object = Me.Invoke("SAT_ValidarCertificadoPropiosMediosFechaDoc", New Object() {cRFC, cNumeroCertificado, cCertificadoBase64, nValidacionCertificado, cMensaje, dFechaDocumento})
            nValidacionCertificado = CType(results(1),EnValidacionCertificado)
            cMensaje = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarCertificadoPropiosMediosFechaDocAsync(ByVal cRFC As String, ByVal cNumeroCertificado As String, ByVal cCertificadoBase64 As String, ByVal nValidacionCertificado As EnValidacionCertificado, ByVal cMensaje As String, ByVal dFechaDocumento As Date)
            Me.SAT_ValidarCertificadoPropiosMediosFechaDocAsync(cRFC, cNumeroCertificado, cCertificadoBase64, nValidacionCertificado, cMensaje, dFechaDocumento, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarCertificadoPropiosMediosFechaDocAsync(ByVal cRFC As String, ByVal cNumeroCertificado As String, ByVal cCertificadoBase64 As String, ByVal nValidacionCertificado As EnValidacionCertificado, ByVal cMensaje As String, ByVal dFechaDocumento As Date, ByVal userState As Object)
            If (Me.SAT_ValidarCertificadoPropiosMediosFechaDocOperationCompleted Is Nothing) Then
                Me.SAT_ValidarCertificadoPropiosMediosFechaDocOperationCompleted = AddressOf Me.OnSAT_ValidarCertificadoPropiosMediosFechaDocOperationCompleted
            End If
            Me.InvokeAsync("SAT_ValidarCertificadoPropiosMediosFechaDoc", New Object() {cRFC, cNumeroCertificado, cCertificadoBase64, nValidacionCertificado, cMensaje, dFechaDocumento}, Me.SAT_ValidarCertificadoPropiosMediosFechaDocOperationCompleted, userState)
        End Sub
        
        Private Sub OnSAT_ValidarCertificadoPropiosMediosFechaDocOperationCompleted(ByVal arg As Object)
            If (Not (Me.SAT_ValidarCertificadoPropiosMediosFechaDocCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SAT_ValidarCertificadoPropiosMediosFechaDocCompleted(Me, New SAT_ValidarCertificadoPropiosMediosFechaDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/SAT_ConsecutivoDentroRango", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SAT_ConsecutivoDentroRango(ByVal cRFC As String, ByVal oSerie As Object, ByVal nFolio As Long, ByVal nAnoAprob As Long, ByVal nNumAprob As String, ByRef cMensaje As String) As Boolean
            Dim results() As Object = Me.Invoke("SAT_ConsecutivoDentroRango", New Object() {cRFC, oSerie, nFolio, nAnoAprob, nNumAprob, cMensaje})
            cMensaje = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SAT_ConsecutivoDentroRangoAsync(ByVal cRFC As String, ByVal oSerie As Object, ByVal nFolio As Long, ByVal nAnoAprob As Long, ByVal nNumAprob As String, ByVal cMensaje As String)
            Me.SAT_ConsecutivoDentroRangoAsync(cRFC, oSerie, nFolio, nAnoAprob, nNumAprob, cMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SAT_ConsecutivoDentroRangoAsync(ByVal cRFC As String, ByVal oSerie As Object, ByVal nFolio As Long, ByVal nAnoAprob As Long, ByVal nNumAprob As String, ByVal cMensaje As String, ByVal userState As Object)
            If (Me.SAT_ConsecutivoDentroRangoOperationCompleted Is Nothing) Then
                Me.SAT_ConsecutivoDentroRangoOperationCompleted = AddressOf Me.OnSAT_ConsecutivoDentroRangoOperationCompleted
            End If
            Me.InvokeAsync("SAT_ConsecutivoDentroRango", New Object() {cRFC, oSerie, nFolio, nAnoAprob, nNumAprob, cMensaje}, Me.SAT_ConsecutivoDentroRangoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSAT_ConsecutivoDentroRangoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SAT_ConsecutivoDentroRangoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SAT_ConsecutivoDentroRangoCompleted(Me, New SAT_ConsecutivoDentroRangoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/SATint_AgregarCertificadoParaFIEL", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SATint_AgregarCertificadoParaFIEL(ByVal cRFC As String, ByVal cNumCert As String, ByVal cFechaIni As String, ByVal cFechaFin As String) As String
            Dim results() As Object = Me.Invoke("SATint_AgregarCertificadoParaFIEL", New Object() {cRFC, cNumCert, cFechaIni, cFechaFin})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SATint_AgregarCertificadoParaFIELAsync(ByVal cRFC As String, ByVal cNumCert As String, ByVal cFechaIni As String, ByVal cFechaFin As String)
            Me.SATint_AgregarCertificadoParaFIELAsync(cRFC, cNumCert, cFechaIni, cFechaFin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SATint_AgregarCertificadoParaFIELAsync(ByVal cRFC As String, ByVal cNumCert As String, ByVal cFechaIni As String, ByVal cFechaFin As String, ByVal userState As Object)
            If (Me.SATint_AgregarCertificadoParaFIELOperationCompleted Is Nothing) Then
                Me.SATint_AgregarCertificadoParaFIELOperationCompleted = AddressOf Me.OnSATint_AgregarCertificadoParaFIELOperationCompleted
            End If
            Me.InvokeAsync("SATint_AgregarCertificadoParaFIEL", New Object() {cRFC, cNumCert, cFechaIni, cFechaFin}, Me.SATint_AgregarCertificadoParaFIELOperationCompleted, userState)
        End Sub
        
        Private Sub OnSATint_AgregarCertificadoParaFIELOperationCompleted(ByVal arg As Object)
            If (Not (Me.SATint_AgregarCertificadoParaFIELCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SATint_AgregarCertificadoParaFIELCompleted(Me, New SATint_AgregarCertificadoParaFIELCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/anularDocumentoElectronicoXML", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function anularDocumentoElectronicoXML(ByVal usuario As String, ByVal password As String, ByVal id As String, ByVal datosDocumentoXML As String) As String
            Dim results() As Object = Me.Invoke("anularDocumentoElectronicoXML", New Object() {usuario, password, id, datosDocumentoXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub anularDocumentoElectronicoXMLAsync(ByVal usuario As String, ByVal password As String, ByVal id As String, ByVal datosDocumentoXML As String)
            Me.anularDocumentoElectronicoXMLAsync(usuario, password, id, datosDocumentoXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub anularDocumentoElectronicoXMLAsync(ByVal usuario As String, ByVal password As String, ByVal id As String, ByVal datosDocumentoXML As String, ByVal userState As Object)
            If (Me.anularDocumentoElectronicoXMLOperationCompleted Is Nothing) Then
                Me.anularDocumentoElectronicoXMLOperationCompleted = AddressOf Me.OnanularDocumentoElectronicoXMLOperationCompleted
            End If
            Me.InvokeAsync("anularDocumentoElectronicoXML", New Object() {usuario, password, id, datosDocumentoXML}, Me.anularDocumentoElectronicoXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnanularDocumentoElectronicoXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.anularDocumentoElectronicoXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent anularDocumentoElectronicoXMLCompleted(Me, New anularDocumentoElectronicoXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/anularDocumentoElectronicoXML_SinNotaDeCredit"& _ 
            "o", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function anularDocumentoElectronicoXML_SinNotaDeCredito(ByVal usuario As String, ByVal password As String, ByVal id As String, ByVal datosDocumentoXML As String) As String
            Dim results() As Object = Me.Invoke("anularDocumentoElectronicoXML_SinNotaDeCredito", New Object() {usuario, password, id, datosDocumentoXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub anularDocumentoElectronicoXML_SinNotaDeCreditoAsync(ByVal usuario As String, ByVal password As String, ByVal id As String, ByVal datosDocumentoXML As String)
            Me.anularDocumentoElectronicoXML_SinNotaDeCreditoAsync(usuario, password, id, datosDocumentoXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub anularDocumentoElectronicoXML_SinNotaDeCreditoAsync(ByVal usuario As String, ByVal password As String, ByVal id As String, ByVal datosDocumentoXML As String, ByVal userState As Object)
            If (Me.anularDocumentoElectronicoXML_SinNotaDeCreditoOperationCompleted Is Nothing) Then
                Me.anularDocumentoElectronicoXML_SinNotaDeCreditoOperationCompleted = AddressOf Me.OnanularDocumentoElectronicoXML_SinNotaDeCreditoOperationCompleted
            End If
            Me.InvokeAsync("anularDocumentoElectronicoXML_SinNotaDeCredito", New Object() {usuario, password, id, datosDocumentoXML}, Me.anularDocumentoElectronicoXML_SinNotaDeCreditoOperationCompleted, userState)
        End Sub
        
        Private Sub OnanularDocumentoElectronicoXML_SinNotaDeCreditoOperationCompleted(ByVal arg As Object)
            If (Not (Me.anularDocumentoElectronicoXML_SinNotaDeCreditoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent anularDocumentoElectronicoXML_SinNotaDeCreditoCompleted(Me, New anularDocumentoElectronicoXML_SinNotaDeCreditoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/receiveCFD", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function receiveCFD(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String) As String
            Dim results() As Object = Me.Invoke("receiveCFD", New Object() {usuario, password, xmlFirmado})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub receiveCFDAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String)
            Me.receiveCFDAsync(usuario, password, xmlFirmado, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub receiveCFDAsync(ByVal usuario As String, ByVal password As String, ByVal xmlFirmado As String, ByVal userState As Object)
            If (Me.receiveCFDOperationCompleted Is Nothing) Then
                Me.receiveCFDOperationCompleted = AddressOf Me.OnreceiveCFDOperationCompleted
            End If
            Me.InvokeAsync("receiveCFD", New Object() {usuario, password, xmlFirmado}, Me.receiveCFDOperationCompleted, userState)
        End Sub
        
        Private Sub OnreceiveCFDOperationCompleted(ByVal arg As Object)
            If (Not (Me.receiveCFDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent receiveCFDCompleted(Me, New receiveCFDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/getCFDI_FromCFD", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCFDI_FromCFD(ByVal usuario As String, ByVal password As String, ByVal xmlCFD As String) As String
            Dim results() As Object = Me.Invoke("getCFDI_FromCFD", New Object() {usuario, password, xmlCFD})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCFDI_FromCFDAsync(ByVal usuario As String, ByVal password As String, ByVal xmlCFD As String)
            Me.getCFDI_FromCFDAsync(usuario, password, xmlCFD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCFDI_FromCFDAsync(ByVal usuario As String, ByVal password As String, ByVal xmlCFD As String, ByVal userState As Object)
            If (Me.getCFDI_FromCFDOperationCompleted Is Nothing) Then
                Me.getCFDI_FromCFDOperationCompleted = AddressOf Me.OngetCFDI_FromCFDOperationCompleted
            End If
            Me.InvokeAsync("getCFDI_FromCFD", New Object() {usuario, password, xmlCFD}, Me.getCFDI_FromCFDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCFDI_FromCFDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCFDI_FromCFDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCFDI_FromCFDCompleted(Me, New getCFDI_FromCFDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/generaPDF", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function generaPDF(ByVal usuario As String, ByVal password As String, ByVal rfcemisor As String, ByVal uuid As String) As String
            Dim results() As Object = Me.Invoke("generaPDF", New Object() {usuario, password, rfcemisor, uuid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub generaPDFAsync(ByVal usuario As String, ByVal password As String, ByVal rfcemisor As String, ByVal uuid As String)
            Me.generaPDFAsync(usuario, password, rfcemisor, uuid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub generaPDFAsync(ByVal usuario As String, ByVal password As String, ByVal rfcemisor As String, ByVal uuid As String, ByVal userState As Object)
            If (Me.generaPDFOperationCompleted Is Nothing) Then
                Me.generaPDFOperationCompleted = AddressOf Me.OngeneraPDFOperationCompleted
            End If
            Me.InvokeAsync("generaPDF", New Object() {usuario, password, rfcemisor, uuid}, Me.generaPDFOperationCompleted, userState)
        End Sub
        
        Private Sub OngeneraPDFOperationCompleted(ByVal arg As Object)
            If (Not (Me.generaPDFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent generaPDFCompleted(Me, New generaPDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/getCFDI_FromCFDToken", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCFDI_FromCFDToken(ByVal usuario As String, ByVal password As String, ByVal xmlCFD As String) As String
            Dim results() As Object = Me.Invoke("getCFDI_FromCFDToken", New Object() {usuario, password, xmlCFD})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCFDI_FromCFDTokenAsync(ByVal usuario As String, ByVal password As String, ByVal xmlCFD As String)
            Me.getCFDI_FromCFDTokenAsync(usuario, password, xmlCFD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCFDI_FromCFDTokenAsync(ByVal usuario As String, ByVal password As String, ByVal xmlCFD As String, ByVal userState As Object)
            If (Me.getCFDI_FromCFDTokenOperationCompleted Is Nothing) Then
                Me.getCFDI_FromCFDTokenOperationCompleted = AddressOf Me.OngetCFDI_FromCFDTokenOperationCompleted
            End If
            Me.InvokeAsync("getCFDI_FromCFDToken", New Object() {usuario, password, xmlCFD}, Me.getCFDI_FromCFDTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCFDI_FromCFDTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCFDI_FromCFDTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCFDI_FromCFDTokenCompleted(Me, New getCFDI_FromCFDTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/SAT_ValidarComplementoNomina", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SAT_ValidarComplementoNomina(ByVal oXMLDocument As System.Xml.XmlNode, ByRef cMensaje As String) As Boolean
            Dim results() As Object = Me.Invoke("SAT_ValidarComplementoNomina", New Object() {oXMLDocument, cMensaje})
            cMensaje = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarComplementoNominaAsync(ByVal oXMLDocument As System.Xml.XmlNode, ByVal cMensaje As String)
            Me.SAT_ValidarComplementoNominaAsync(oXMLDocument, cMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarComplementoNominaAsync(ByVal oXMLDocument As System.Xml.XmlNode, ByVal cMensaje As String, ByVal userState As Object)
            If (Me.SAT_ValidarComplementoNominaOperationCompleted Is Nothing) Then
                Me.SAT_ValidarComplementoNominaOperationCompleted = AddressOf Me.OnSAT_ValidarComplementoNominaOperationCompleted
            End If
            Me.InvokeAsync("SAT_ValidarComplementoNomina", New Object() {oXMLDocument, cMensaje}, Me.SAT_ValidarComplementoNominaOperationCompleted, userState)
        End Sub
        
        Private Sub OnSAT_ValidarComplementoNominaOperationCompleted(ByVal arg As Object)
            If (Not (Me.SAT_ValidarComplementoNominaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SAT_ValidarComplementoNominaCompleted(Me, New SAT_ValidarComplementoNominaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/existeConsecutivoInterno", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function existeConsecutivoInterno(ByVal cConsecutivoInterno As String, ByRef cErrorMensaje As String) As Boolean
            Dim results() As Object = Me.Invoke("existeConsecutivoInterno", New Object() {cConsecutivoInterno, cErrorMensaje})
            cErrorMensaje = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub existeConsecutivoInternoAsync(ByVal cConsecutivoInterno As String, ByVal cErrorMensaje As String)
            Me.existeConsecutivoInternoAsync(cConsecutivoInterno, cErrorMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub existeConsecutivoInternoAsync(ByVal cConsecutivoInterno As String, ByVal cErrorMensaje As String, ByVal userState As Object)
            If (Me.existeConsecutivoInternoOperationCompleted Is Nothing) Then
                Me.existeConsecutivoInternoOperationCompleted = AddressOf Me.OnexisteConsecutivoInternoOperationCompleted
            End If
            Me.InvokeAsync("existeConsecutivoInterno", New Object() {cConsecutivoInterno, cErrorMensaje}, Me.existeConsecutivoInternoOperationCompleted, userState)
        End Sub
        
        Private Sub OnexisteConsecutivoInternoOperationCompleted(ByVal arg As Object)
            If (Not (Me.existeConsecutivoInternoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent existeConsecutivoInternoCompleted(Me, New existeConsecutivoInternoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/generaPDF_Recepcion", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function generaPDF_Recepcion(ByVal usuario As String, ByVal password As String, ByVal rfcReceptor As String, ByVal uuid As String) As String
            Dim results() As Object = Me.Invoke("generaPDF_Recepcion", New Object() {usuario, password, rfcReceptor, uuid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub generaPDF_RecepcionAsync(ByVal usuario As String, ByVal password As String, ByVal rfcReceptor As String, ByVal uuid As String)
            Me.generaPDF_RecepcionAsync(usuario, password, rfcReceptor, uuid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub generaPDF_RecepcionAsync(ByVal usuario As String, ByVal password As String, ByVal rfcReceptor As String, ByVal uuid As String, ByVal userState As Object)
            If (Me.generaPDF_RecepcionOperationCompleted Is Nothing) Then
                Me.generaPDF_RecepcionOperationCompleted = AddressOf Me.OngeneraPDF_RecepcionOperationCompleted
            End If
            Me.InvokeAsync("generaPDF_Recepcion", New Object() {usuario, password, rfcReceptor, uuid}, Me.generaPDF_RecepcionOperationCompleted, userState)
        End Sub
        
        Private Sub OngeneraPDF_RecepcionOperationCompleted(ByVal arg As Object)
            If (Not (Me.generaPDF_RecepcionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent generaPDF_RecepcionCompleted(Me, New generaPDF_RecepcionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/generaPDF_Envio", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function generaPDF_Envio(ByVal usuario As String, ByVal password As String, ByVal rfcEmisor As String, ByVal uuid As String) As String
            Dim results() As Object = Me.Invoke("generaPDF_Envio", New Object() {usuario, password, rfcEmisor, uuid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub generaPDF_EnvioAsync(ByVal usuario As String, ByVal password As String, ByVal rfcEmisor As String, ByVal uuid As String)
            Me.generaPDF_EnvioAsync(usuario, password, rfcEmisor, uuid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub generaPDF_EnvioAsync(ByVal usuario As String, ByVal password As String, ByVal rfcEmisor As String, ByVal uuid As String, ByVal userState As Object)
            If (Me.generaPDF_EnvioOperationCompleted Is Nothing) Then
                Me.generaPDF_EnvioOperationCompleted = AddressOf Me.OngeneraPDF_EnvioOperationCompleted
            End If
            Me.InvokeAsync("generaPDF_Envio", New Object() {usuario, password, rfcEmisor, uuid}, Me.generaPDF_EnvioOperationCompleted, userState)
        End Sub
        
        Private Sub OngeneraPDF_EnvioOperationCompleted(ByVal arg As Object)
            If (Not (Me.generaPDF_EnvioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent generaPDF_EnvioCompleted(Me, New generaPDF_EnvioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/SAT_ValidarComplementoNotariosPublicos", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SAT_ValidarComplementoNotariosPublicos(ByVal oXMLDocument As System.Xml.XmlNode, ByRef cMensaje As String) As Boolean
            Dim results() As Object = Me.Invoke("SAT_ValidarComplementoNotariosPublicos", New Object() {oXMLDocument, cMensaje})
            cMensaje = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarComplementoNotariosPublicosAsync(ByVal oXMLDocument As System.Xml.XmlNode, ByVal cMensaje As String)
            Me.SAT_ValidarComplementoNotariosPublicosAsync(oXMLDocument, cMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarComplementoNotariosPublicosAsync(ByVal oXMLDocument As System.Xml.XmlNode, ByVal cMensaje As String, ByVal userState As Object)
            If (Me.SAT_ValidarComplementoNotariosPublicosOperationCompleted Is Nothing) Then
                Me.SAT_ValidarComplementoNotariosPublicosOperationCompleted = AddressOf Me.OnSAT_ValidarComplementoNotariosPublicosOperationCompleted
            End If
            Me.InvokeAsync("SAT_ValidarComplementoNotariosPublicos", New Object() {oXMLDocument, cMensaje}, Me.SAT_ValidarComplementoNotariosPublicosOperationCompleted, userState)
        End Sub
        
        Private Sub OnSAT_ValidarComplementoNotariosPublicosOperationCompleted(ByVal arg As Object)
            If (Not (Me.SAT_ValidarComplementoNotariosPublicosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SAT_ValidarComplementoNotariosPublicosCompleted(Me, New SAT_ValidarComplementoNotariosPublicosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/SAT_ValidarTimbre", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SAT_ValidarTimbre(ByVal cCadenaOriginalTimbre As String, ByVal cNumeroCertificadoPAC As String, ByVal cSelloTimbre As String, ByRef cMensaje As String) As Boolean
            Dim results() As Object = Me.Invoke("SAT_ValidarTimbre", New Object() {cCadenaOriginalTimbre, cNumeroCertificadoPAC, cSelloTimbre, cMensaje})
            cMensaje = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarTimbreAsync(ByVal cCadenaOriginalTimbre As String, ByVal cNumeroCertificadoPAC As String, ByVal cSelloTimbre As String, ByVal cMensaje As String)
            Me.SAT_ValidarTimbreAsync(cCadenaOriginalTimbre, cNumeroCertificadoPAC, cSelloTimbre, cMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SAT_ValidarTimbreAsync(ByVal cCadenaOriginalTimbre As String, ByVal cNumeroCertificadoPAC As String, ByVal cSelloTimbre As String, ByVal cMensaje As String, ByVal userState As Object)
            If (Me.SAT_ValidarTimbreOperationCompleted Is Nothing) Then
                Me.SAT_ValidarTimbreOperationCompleted = AddressOf Me.OnSAT_ValidarTimbreOperationCompleted
            End If
            Me.InvokeAsync("SAT_ValidarTimbre", New Object() {cCadenaOriginalTimbre, cNumeroCertificadoPAC, cSelloTimbre, cMensaje}, Me.SAT_ValidarTimbreOperationCompleted, userState)
        End Sub
        
        Private Sub OnSAT_ValidarTimbreOperationCompleted(ByVal arg As Object)
            If (Not (Me.SAT_ValidarTimbreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SAT_ValidarTimbreCompleted(Me, New SAT_ValidarTimbreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/SAT_ExisteTimbreSAT", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SAT_ExisteTimbreSAT(ByVal cRFCEmisor As String, ByVal cRFCReceptor As String, ByVal nMontoTotal As Decimal, ByVal cUUID As String, ByRef cMensaje As String) As Boolean
            Dim results() As Object = Me.Invoke("SAT_ExisteTimbreSAT", New Object() {cRFCEmisor, cRFCReceptor, nMontoTotal, cUUID, cMensaje})
            cMensaje = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SAT_ExisteTimbreSATAsync(ByVal cRFCEmisor As String, ByVal cRFCReceptor As String, ByVal nMontoTotal As Decimal, ByVal cUUID As String, ByVal cMensaje As String)
            Me.SAT_ExisteTimbreSATAsync(cRFCEmisor, cRFCReceptor, nMontoTotal, cUUID, cMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SAT_ExisteTimbreSATAsync(ByVal cRFCEmisor As String, ByVal cRFCReceptor As String, ByVal nMontoTotal As Decimal, ByVal cUUID As String, ByVal cMensaje As String, ByVal userState As Object)
            If (Me.SAT_ExisteTimbreSATOperationCompleted Is Nothing) Then
                Me.SAT_ExisteTimbreSATOperationCompleted = AddressOf Me.OnSAT_ExisteTimbreSATOperationCompleted
            End If
            Me.InvokeAsync("SAT_ExisteTimbreSAT", New Object() {cRFCEmisor, cRFCReceptor, nMontoTotal, cUUID, cMensaje}, Me.SAT_ExisteTimbreSATOperationCompleted, userState)
        End Sub
        
        Private Sub OnSAT_ExisteTimbreSATOperationCompleted(ByVal arg As Object)
            If (Not (Me.SAT_ExisteTimbreSATCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SAT_ExisteTimbreSATCompleted(Me, New SAT_ExisteTimbreSATCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://edixcfdisecure.ekomercio.com/ValidarFuncionamiento", RequestNamespace:="http://edixcfdisecure.ekomercio.com/", ResponseNamespace:="http://edixcfdisecure.ekomercio.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidarFuncionamiento(ByRef cMensaje As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidarFuncionamiento", New Object() {cMensaje})
            cMensaje = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidarFuncionamientoAsync(ByVal cMensaje As String)
            Me.ValidarFuncionamientoAsync(cMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidarFuncionamientoAsync(ByVal cMensaje As String, ByVal userState As Object)
            If (Me.ValidarFuncionamientoOperationCompleted Is Nothing) Then
                Me.ValidarFuncionamientoOperationCompleted = AddressOf Me.OnValidarFuncionamientoOperationCompleted
            End If
            Me.InvokeAsync("ValidarFuncionamiento", New Object() {cMensaje}, Me.ValidarFuncionamientoOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidarFuncionamientoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidarFuncionamientoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidarFuncionamientoCompleted(Me, New ValidarFuncionamientoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://edixcfdisecure.ekomercio.com/")>  _
    Public Enum EnValidacionCertificado
        
        '''<remarks/>
        Ok
        
        '''<remarks/>
        NoExiste
        
        '''<remarks/>
        Cancelado
        
        '''<remarks/>
        Revocado
        
        '''<remarks/>
        NoVigente
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ValidacionFacturasCFDICompletedEventHandler(ByVal sender As Object, ByVal e As ValidacionFacturasCFDICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidacionFacturasCFDICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub aboutCompletedEventHandler(ByVal sender As Object, ByVal e As aboutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class aboutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub procesarTextoPlanoCompletedEventHandler(ByVal sender As Object, ByVal e As procesarTextoPlanoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class procesarTextoPlanoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub getCFDI_EmailCompletedEventHandler(ByVal sender As Object, ByVal e As getCFDI_EmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCFDI_EmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub getCFDICompletedEventHandler(ByVal sender As Object, ByVal e As getCFDICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCFDICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub getCFDI_SignCompletedEventHandler(ByVal sender As Object, ByVal e As getCFDI_SignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCFDI_SignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub getTimbreCFDICompletedEventHandler(ByVal sender As Object, ByVal e As getTimbreCFDICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTimbreCFDICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub cancelarCFDICompletedEventHandler(ByVal sender As Object, ByVal e As cancelarCFDICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelarCFDICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub cancelarRetencionCompletedEventHandler(ByVal sender As Object, ByVal e As cancelarRetencionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelarRetencionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub SAT_ValidarListaBlancaCompletedEventHandler(ByVal sender As Object, ByVal e As SAT_ValidarListaBlancaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SAT_ValidarListaBlancaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub SAT_ValidarCertificadoPropiosMediosCompletedEventHandler(ByVal sender As Object, ByVal e As SAT_ValidarCertificadoPropiosMediosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SAT_ValidarCertificadoPropiosMediosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property nValidacionCertificado() As EnValidacionCertificado
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),EnValidacionCertificado)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub SAT_ValidarCertificadoPropiosMediosFechaDocCompletedEventHandler(ByVal sender As Object, ByVal e As SAT_ValidarCertificadoPropiosMediosFechaDocCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SAT_ValidarCertificadoPropiosMediosFechaDocCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property nValidacionCertificado() As EnValidacionCertificado
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),EnValidacionCertificado)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub SAT_ConsecutivoDentroRangoCompletedEventHandler(ByVal sender As Object, ByVal e As SAT_ConsecutivoDentroRangoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SAT_ConsecutivoDentroRangoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub SATint_AgregarCertificadoParaFIELCompletedEventHandler(ByVal sender As Object, ByVal e As SATint_AgregarCertificadoParaFIELCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SATint_AgregarCertificadoParaFIELCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub anularDocumentoElectronicoXMLCompletedEventHandler(ByVal sender As Object, ByVal e As anularDocumentoElectronicoXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class anularDocumentoElectronicoXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub anularDocumentoElectronicoXML_SinNotaDeCreditoCompletedEventHandler(ByVal sender As Object, ByVal e As anularDocumentoElectronicoXML_SinNotaDeCreditoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class anularDocumentoElectronicoXML_SinNotaDeCreditoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub receiveCFDCompletedEventHandler(ByVal sender As Object, ByVal e As receiveCFDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class receiveCFDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub getCFDI_FromCFDCompletedEventHandler(ByVal sender As Object, ByVal e As getCFDI_FromCFDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCFDI_FromCFDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub generaPDFCompletedEventHandler(ByVal sender As Object, ByVal e As generaPDFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class generaPDFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub getCFDI_FromCFDTokenCompletedEventHandler(ByVal sender As Object, ByVal e As getCFDI_FromCFDTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCFDI_FromCFDTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub SAT_ValidarComplementoNominaCompletedEventHandler(ByVal sender As Object, ByVal e As SAT_ValidarComplementoNominaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SAT_ValidarComplementoNominaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub existeConsecutivoInternoCompletedEventHandler(ByVal sender As Object, ByVal e As existeConsecutivoInternoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class existeConsecutivoInternoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cErrorMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub generaPDF_RecepcionCompletedEventHandler(ByVal sender As Object, ByVal e As generaPDF_RecepcionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class generaPDF_RecepcionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub generaPDF_EnvioCompletedEventHandler(ByVal sender As Object, ByVal e As generaPDF_EnvioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class generaPDF_EnvioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub SAT_ValidarComplementoNotariosPublicosCompletedEventHandler(ByVal sender As Object, ByVal e As SAT_ValidarComplementoNotariosPublicosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SAT_ValidarComplementoNotariosPublicosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub SAT_ValidarTimbreCompletedEventHandler(ByVal sender As Object, ByVal e As SAT_ValidarTimbreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SAT_ValidarTimbreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub SAT_ExisteTimbreSATCompletedEventHandler(ByVal sender As Object, ByVal e As SAT_ExisteTimbreSATCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SAT_ExisteTimbreSATCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ValidarFuncionamientoCompletedEventHandler(ByVal sender As Object, ByVal e As ValidarFuncionamientoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidarFuncionamientoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
